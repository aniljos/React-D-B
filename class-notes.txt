React session June 2025



Git Url: https://github.com/aniljos/React-Lnw
REST API Mock: https://github.com/aniljos/REST-API-Mock
Babel cdn: https://cdnjs.com/libraries/babel-standalone/7.26.3



Introduction: https://forms.gle/e45YjdSzvZf1ifvV9
Quiz 1: https://forms.cloud.microsoft/r/4um3PSmZzY

JavaScript
	- Interpreted: No compilation
	- Dynamic - static typing
	- OOPs - Not class oriented
	- Versions 
	
Framework
	- Support for the latest versions and features of React
	- Server-side rendering(SSR) and SEO features
	- Stability & Optimized
	
Vite Project Files
	- package.json - npm configuration file
	- tsconfig.json - typescript compiler config
	- vite.config - Vite config
	
	- index.html - single page
	- main.tsx - entry point script
	- App.tsx - Root Component(Main) 
	
Command
	npm create vite ==> npx create-vite
	
	npm - install, uninstall, list, create
	npx - run a tool(without install the tool)
	
Components
	- functional(recommended)
	- class
	
	- client-side rendering(CSR)
	- server-side rendering(SSR) - from React 18: optimizations, SEO
	
JSX
	- Everything is a component(div, p etc)
	- HTML elements are components referred to as instrinsic components(start with a lowe case)
	- User-defined components must start with an upper-case.
	- JSX is JS expressions
		- const jsx = (<p> Hello </p>)
	- <> </> = React Fragment(typically used for a root element in JSX)
	- Conditional rendering: use the ternary operator
	- Iterate over an array/collection: use the map method
	
props
	- The component author defines the props to the component.
	- props is always an object
	- props is used to pass data from a parent to a child component and vice-verse
	- Changes to props will re-render the component.
	- props is always read-only in the child component
	
state
   - useState
   - state must be treated as immutable
			- create a copy, change the copy and update the state with the copy.
   - state changes will a re-render
   - state change is asynchronous.
   - setState overloads
		- setState(nextValue)
		- setState(callback)=> (prevValue => nextValue)
   - state changes are batched
         - counter = 5
		 - setCounter(counter + 1); => batch => setCounter(6) => batch invoked => counter - 6  
         - setCounter(counter + 1); => batch => setCounter(6) => batch invoked => counter - 6 
		 
		 - setCounter(prevCounter => prevCounter + 1); 
				=> batch => setCounter(invoke the callback)= batch invoked => counter - pCounter + 1 =6
         - setCounter(prevCounter => prevCounter + 1);   
				=> batch => setCounter(invoke the callback)= batch invoked => counter - pCounter + 1 =7
	
useEffect(effects)
	- implements side-effects(async operations) in a component
	- useEffect(setUp, [list of dependencies]);
	- mounted(after its mounted on the UI)
		- useEffect(setUp, [empty dependency array]);
		- api calls to the server(executed only once)
		- DOM initializations
		- Add listeners to events on the window or document and DOM objects
		- mount happens after the first rendered
	- unmount(before unmounted)
		- cleanup method of the mount effects
		- cancel the incompleted api calls
		- Remove listeners to events on the window or document and DOM objects
		- Any cleanup code
		
forms
	- controlled input
		- Reactive, better user-experience
		- associate a state with each input field, 
		- onChange eventhandler, value property
		
	- uncontrolled input
		- Non-reactive, faster
		
		
Http calls from the browswer
	- XMLHttpRequest(low-level)
	- fetch (HTML 5)- high-level
	
	
	http status
		- 100 (information)
		- 200 (success)
		- 300 (redirect)
		
		- 400 (client error)
		- 500 (server error)
		

Promise
	- proxy object
	- are either resolved or rejected
	- .then method => successCallback, errorCallback
	- .catch method => errorCallback
	
	- async and await(preferred)
		- will work only with promises
		- write code asynchronous code with a synchronous behavior
		
useRef
	- create a mutable reference
	- the value is retained across mutiple renders
	- will not trigger a component re-render
	- Used to store a handle of a DOM(HTML) element.
	
CSS
	- define a local css
	- style attribute(inline style) or class attribute
	
	
Exercise:
	Create new route /customers
	Add a component: ListCustomers - lined to the route /customers
	Display all customers form api GET(http://localhost:9000/customers)
	Use HTML table.
	Create a model for customer
	

   